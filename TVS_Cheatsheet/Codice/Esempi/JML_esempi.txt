
package gioco_JML;

public class Gioco {
	
	/*@ spec_public @*/ int[] creditoGiocatori;
	
	//@ public invariant numGiocatori >= 0;
	/*@ spec_public @*/ int numGiocatori;
	
	//@ public invariant numGiocata >= 0;
	/*@ spec_public @*/ int numGiocata;
	
	/*@ spec_public @*/ boolean Gioca;
	
	//@ requires n > 0;
	//@ ensures numGiocatori == n;
	//@ ensures numGiocata == 0;
	//@ ensures (\forall int i; i >= 0 && i < numGiocatori; creditoGiocatori[i] == 3);
	public Gioco(int n) {
		Gioca = true;
		numGiocatori = n;
		numGiocata = 0;
		creditoGiocatori = new int[n];
		
		//@ loop_invariant i >= 0 && i <= n;
		for (int i = 0; i < n; i++) {
			creditoGiocatori[i] = 3;
		}
	}
	
	// ogni elemento verificabile ha già un invariante associato
	public boolean gioca() {
		if (Gioca) {
			updateConto(numGiocata % numGiocatori, (numGiocata % 3) + 1);
			numGiocata++;
		}
		return Gioca;
	}
	
	// check sconfitta di un giocatore e stop al gioco
	/*ensures (\exists int i; i >= 0 && i < creditoGiocatori.length; creditoGiocatori[i] == 0) 
	  @ ==> Gioca == false; 
	@*/
	void checkPerdita() {
		for (int credito : creditoGiocatori) {
			if (credito == 0) {
				Gioca = false;
				//@ assert (Gioca == false);
			}
		}
	}
	
	//@ requires giocatore <= numGiocatori;
	//@ requires (dado >= 1 && dado <= 3);
	//@ requires creditoGiocatori != null && creditoGiocatori.length >= 1;
	//@ ensures (\forall int i; i > 0 && i < numGiocatori; creditoGiocatori[i] >= 0);
	public boolean updateConto(int giocatore, int dado) {
		System.out.println("Turno del giocatore: " + giocatore + ", Valore dado: " + dado);
		switch (dado) {
		case 1:
			// giocatore ha perso il turno
			creditoGiocatori[giocatore] --;
			checkPerdita();
			// giocatore cede credito al giocatore a sx
			if (giocatore == 0) {
				// primo giocatore, cede all'ultimo
				creditoGiocatori[numGiocatori - 1] ++;	
			}
			else {
				creditoGiocatori[giocatore - 1] ++;
			}
			break;
		case 2:
			// patta
			return false;
		case 3:
			// giocatore ha vinto il turno
			creditoGiocatori[giocatore] ++;
			// giocatore prende credito dal giocatore a dx
			if (giocatore == numGiocatori - 1) {
				// ultimo giocatore, prende credito dal primo
				creditoGiocatori[0] --;
			}
			else {
				creditoGiocatori[giocatore + 1] --;
			}
			checkPerdita();
			break;
		}
		
		return true;	// ha gestito un caso di in cui ha modificato il credito dei gicoatori
	}
	
	// print stato del gioco
	void printStatoGioco() {
		System.out.println("Stato gioco: " + String.valueOf(Gioca) + 
				", tot giocate = " + numGiocata + ", credito giocatori: ");
		for (int i = 0; i < numGiocatori; i++) {
			System.out.println("Giocatore " + i + ": " + creditoGiocatori[i]);
		}
		System.out.println("---------------------------------------------------------------");
	}
	
	public static void main(String[] args) {
		Gioco g = new Gioco(4);
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
		g.gioca();
		g.printStatoGioco();
	}
}


#####################################################################################


package talkshow_JML;

import java.util.Random;

public class TalkShow {

	//@ public invariant MAX_TEMPO_PARLA == 5;
	/*@ spec_public @*/ static int MAX_TEMPO_PARLA = 5;
	
	//@ public invariant MAX_TEMPO_ATTESA == 7;
	/*@ spec_public @*/ static int MAX_TEMPO_ATTESA = 7;
	
	/*@ spec_public @*/ Persona[] persone;

	//@ requires MAX_TEMPO_PARLA > 1 && MAX_TEMPO_ATTESA > 1;
	//@ ensures persone != null && persone.length == 6;
	public TalkShow() {
		persone = new Persona[6];

		// stato: 0 = ascolta, 1 = attesa, 2 = parla
		
		//@ loop_invariant i >= 0 && i <= 6;
		for (int i = 0; i < persone.length; i++) {
			persone[i] = new Persona(MAX_TEMPO_PARLA, MAX_TEMPO_ATTESA);
		}
	}

	//@ requires persone != null && persone.length == 6;
	/*ensures (\forall int i; i > 0 && i < persone.length;
		@ persone[i].stato == 0 || persone[i].stato == 1 | persone[i].stato == 2);
	@*/
	public void gestisciPersone() {
		for (Persona p : persone) {
			// sta parlando
			if (p.stato == 2) {
				if (p.tempoParla == 0) {
					p.stato = 0;
					p.microfono = false;
				} else {
					p.tempoParla -= 1;
				}
			}
			// in attesa
			if (p.stato == 1) {
				if (p.tempoAttesa == 0) {
					p.stato = 0;
				} else {
					p.tempoAttesa -= 1;
				}
			}
			// ascolta e vuole parlare
			if (p.stato == 0 && p.vuoleParlare == true) {
				p.stato = 1;
				p.tempoAttesa = MAX_TEMPO_ATTESA;
			}
		}
	}

	//@ requires persone != null && persone.length == 6;
	//@ ensures (\exists int i; i > 0 && i < persone.length; persone[i].stato == 2);
	// ensures (\exists int i; i > 0 && i < persone.length; persone[i].microfono == true);
	public void scegliNextParla() {
		Random rand = new Random();
		boolean trovato = false;
		int p = 0;
		while (!trovato) {
			p = rand.nextInt(5);
			if (persone[p].stato == 1 && persone[p].vuoleParlare == true) {
				trovato = true;
				persone[p].stato = 2;
				persone[p].microfono = true;
				persone[p].tempoParla = MAX_TEMPO_PARLA;
			}
		}
	}

	public static void main(String[] args) {
		TalkShow t = new TalkShow();
		t.gestisciPersone();
		t.statoTalkShow();
	}
	
	public void statoTalkShow() {
		System.out.println("Stato talkshow:");
		for (int i = 0; i < persone.length; i++) {
			System.out.println("P" + i + ": tempoAttesa = " + persone[i].tempoAttesa + 
					"," + " tempoParla = " + persone[i].tempoParla + 
					"," + " stato = " + persone[i].stato +
					"," + " microfono = " + String.valueOf(persone[i].microfono) +
					"," + " vuoleParlare = " + String.valueOf(persone[i].vuoleParlare));
		}
		System.out.println("-----------------------------------------------------------");
	}
}

class Persona {
	/*@ spec_public @*/ int tempoParla, tempoAttesa, stato;
	/*@ spec_public @*/ boolean microfono, vuoleParlare;

	//@ requires maxParla > 1 && maxAttesa > 1;
	//@ ensures stato == 0;
	//@ ensures microfono == false && vuoleParlare == false;
	public Persona(int maxParla, int maxAttesa) {
		tempoAttesa = maxAttesa;
		tempoParla = maxParla;
		stato = 0;
		microfono = false;
		vuoleParlare = false;
	}
}


######################################################################################


package semaforo_JML;

public class Semafori {
	
	//@ public invariant coloreSemaforo.length == 2;
	/*@ spec_public @*/ int[] coloreSemaforo;
	
	// 0 = rosso, 1 = verde, 2 = giallo
	
	//@ ensures coloreSemaforo != null && coloreSemaforo.length == 2;
	//@ ensures (\forall int i; i > 0 && i < 2; coloreSemaforo[i] == 0);
	public Semafori() {
		coloreSemaforo = new int[2];
		coloreSemaforo[0] = 0;
		coloreSemaforo[1] = 0;
	}
	
	//@ requires coloreSemaforo != null && coloreSemaforo.length == 2;
	//@ requires (s == 0 || s == 2);
	/*requires (\exists int i; i > 0 && i < coloreSemaforo.length; coloreSemaforo[i] == 1) 
	  @ || (\exists int i; i > 0 && i < coloreSemaforo.length; coloreSemaforo[i] == 0); 
	@*/
	//@ ensures coloreSemaforo[s] == 2;
	public void giallo(int s) {
		coloreSemaforo[s] = 2;
	}
	
	//@ requires coloreSemaforo != null && coloreSemaforo.length == 2;
	//@ requires (s == 0 || s == 1);
	//@ requires coloreSemaforo[s] == 2;
	//@ ensures coloreSemaforo[s] == 0;
	public void rosso(int s) {
		coloreSemaforo[s] = 0;
	}
	
	//@ requires coloreSemaforo != null && coloreSemaforo.length == 2;
	//@ requires (s == 0 || s == 1);
	//@ requires (coloreSemaforo[s] == 2 || coloreSemaforo[s] == 0);
	//@ ensures coloreSemaforo[s] == 1;
	public void verde(int s) {
		coloreSemaforo[s] = 1;
	}
	
	//@ requires coloreSemaforo != null && coloreSemaforo.length == 2;
	public void comando(int s) {
		// entrambi rossi
		if (coloreSemaforo[0] == 0 && coloreSemaforo[1] == 0) {
			//@ assert (\forall int i; i >= 0 && i < coloreSemaforo.length; coloreSemaforo[i] == 0);
			verde(s);
//			coloreSemaforo[s] = 0;	// violo prossimo assert
			//@ assert coloreSemaforo[s] == 1;
//			if (s == 0) {
//				coloreSemaforo[1] = 1;	// violo prossimo assert
//			}
			//@ assert (\exists int i; i > 0 && i < coloreSemaforo.length; coloreSemaforo[i] == 0);
			return;
		}
		// SB rosso, SA verde o giallo, comando su SB
		if (coloreSemaforo[1] == 0 && s == 1) {
			if (coloreSemaforo[0] == 1) {
				giallo(0);
				return;
			}
			if (coloreSemaforo[0] == 2) {
				rosso(0);
				return;
			}
		}
		// SA rosso, SB verde o giallo, comando su SA
		if (coloreSemaforo[0] == 0 && s == 0) {
			if (coloreSemaforo[1] == 1) {
				giallo(1);
				return;
			}
			if (coloreSemaforo[1] == 2) {
				rosso(1);
				return;
			}
		}
	}
	
	public static void main(String[] args) {
		Semafori SA_SB = new Semafori();
		
//		SA_SB.coloreSemaforo = new int[3];	// violo invariante
//		SA_SB.coloreSemaforo = null;	// non può essere null
		
		SA_SB.statoSemafori();
//		SA_SB.comando(45);	// posso dare solo 1 o 0
		SA_SB.comando(0);
		SA_SB.statoSemafori();
		SA_SB.comando(1);
		SA_SB.statoSemafori();
		SA_SB.comando(1);
		SA_SB.statoSemafori();
		SA_SB.comando(1);
		SA_SB.statoSemafori();
//		SA_SB.comando(1);	// SB già verde
	}
	
	void statoSemafori() {
		String colore1 = "";
		switch (coloreSemaforo[0]) {
		case 0:
			colore1 = "rosso";
			break;
		case 1:
			colore1 = "verde";
			break;
		case 2:
			colore1 = "giallo";
			break;
		}
		String colore2 = "";
		switch (coloreSemaforo[1]) {
		case 0:
			colore2 = "rosso";
			break;
		case 1:
			colore2 = "verde";
			break;
		case 2:
			colore2 = "giallo";
			break;
		}
		System.out.println("Stato semafori: SA = " + colore1 + 
				", SB = " + colore2);
	}
}


###############################################################################


