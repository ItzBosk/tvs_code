MODULE main
VAR
	wolf : {L, R};
	goat : {L, R};
	cabbage : {L, R};
	ferryman : {L, R};
	carry : {w, g, c, 0}; -- cosa trasportero' in questo stato per il prossimo
ASSIGN
	init (wolf) := L;
	init (goat) := L;
	init (cabbage) := L;
	init (ferryman) := L;
	-- ferryman
	next (ferryman) :=
		case
			ferryman = L : R;
			ferryman = R : L;
		esac;
	-- wolf 
	next(wolf) := case
	    carry = w : next(ferryman);
	    TRUE: wolf;
	esac;
	-- goat 
	next(goat) := case
	    carry = g : next(ferryman);
	    TRUE: goat;
	esac;
	-- cabbage 
	next(cabbage) := case
	    carry = c : next(ferryman);
	    TRUE: cabbage;
	esac;
	-- cosa può trsportare (senza preocciparsi dei problemi)
	carry := case
	  ferryman = wolf & ferryman = goat & ferryman = cabbage : {w,g,c,0}; 
	  ferryman = goat & ferryman = cabbage : {g,c,0}; 
	  ferryman = wolf & ferryman = cabbage : {w,c,0}; 
	  ferryman = wolf & ferryman = goat : {w,g,0}; 
	  ferryman = wolf : {w,0}; 
	  ferryman = goat : {g,0}; 
	  ferryman = cabbage : {c,0}; 
	  TRUE: 0;
	 esac; 
	
	-- FALSE che uso per controllare che la speficia contenga alcuni comportamenti
-- il wolf non può andare mai a destra (mi aspetto che sia falsa)
CTLSPEC AG(wolf != R);	
-- lo stesso per goat
CTLSPEC AG(goat != R);		
-- non sucded mai che tutti sono a R
CTLSPEC AG(!(goat = R & wolf =R & cabbage = R));		

	
	-- TRUE che uso per controllare che la spec sia corretta
	
	
		--SPEC
	--AG (proc1.state = entering -> AF proc1.state = critical)
